syntax = "proto3";

package com.myjetwallet.messages.outgoing.grpc;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_package = "com.myjetwallet.messages.outgoing.grpc";
option java_outer_classname = "OutgoingMessages";
option csharp_namespace = "ME.Contracts.OutgoingMessages";

service OutgoingEventsService {
    rpc PublishEvents(OutgoingEventBatch) returns (PublishRequestResult){};
}

message OutgoingEventBatch {
    repeated OutgoingEvent events = 1;
}

message PublishRequestResult {
    bool published = 1;
    google.protobuf.StringValue reason = 2;
}

message OutgoingEvent {
    Header header = 1;
    repeated BalanceUpdate balanceUpdates = 2;
    CashIn cashIn = 3;
    CashOut cashOut = 4;
    CashTransfer cashTransfer = 5;
    repeated Order orders = 6;
    ReservedCashInOut reservedCashInOut = 7;
    CashSwap cashSwap = 8;
}

message Header {
    MessageType messageType = 1;
    int64 sequenceNumber = 2;
    string messageId = 3;
    string requestId = 4;
    string version = 5;
    google.protobuf.Timestamp timestamp = 6;
    string eventType = 7;

    enum MessageType {
        UNKNOWN_MESSAGE_TYPE = 0;
        CASH_IN = 1;
        CASH_OUT = 2;
        CASH_TRANSFER = 3;
        ORDER = 4;
        RESERVED_CASH = 5;
        CASH_SWAP = 6;
    }
}

message BalanceUpdate {
    string brokerId = 1;
    string accountId = 2;
    string walletId = 3;
    uint64 walletVersion = 4;
    string assetId = 5;
    string oldBalance = 6;
    string newBalance = 7;
    string oldReserved = 8;
    string newReserved = 9;
}

message CashIn {
    string brokerId = 1;
    string accountId = 2;
    string walletId = 3;
    uint64 walletVersion = 4;
    string assetId = 5;
    string volume = 6;
    repeated Fee fees = 7;
}

message CashOut {
    string brokerId = 1;
    string accountId = 2;
    string walletId = 3;
    uint64 walletVersion = 4;
    string assetId = 5;
    string volume = 6;
    repeated Fee fees = 7;
}

message ReservedCashInOut {
    string brokerId = 1;
    string accountId = 2;
    string walletId = 3;
    uint64 walletVersion = 4;
    string assetId = 5;
    string reservedForOrders = 6;
    string reservedForSwap = 7;
}

message CashTransfer {
    string brokerId = 1;
    string accountId = 2;
    uint64 walletVersion = 3;
    string fromWalletId = 4;
    string toWalletId = 5;
    string volume = 6;
    string overdraftLimit = 7;
    string assetId = 8;
    repeated Fee fees = 9;
}

message CashSwap {
    string brokerId = 1;
    string accountId1 = 2;
    string walletId1 = 3;
    string assetId1 = 4;
    string volume1 = 5;
    string accountId2 = 6;
    string walletId2 = 7;
    string assetId2 = 8;
    string volume2 = 9;
}

message Order {
    string brokerId = 1;
    string accountId = 2;
    string walletId = 3;
    string id = 4;
    string externalId = 5;
    string assetPairId = 6;
    OrderType orderType = 7;
    OrderSide side = 8;
    string volume = 9;
    string remainingVolume = 10;
    string price = 11;
    OrderStatus status = 12;
    string rejectReason = 13;
    google.protobuf.Timestamp statusDate = 14;
    google.protobuf.Timestamp createdAt = 15;
    google.protobuf.Timestamp registered = 16;
    google.protobuf.Timestamp lastMatchTime = 17;
    string lowerLimitPrice = 18;
    string lowerPrice = 19;
    string upperLimitPrice = 20;
    string upperPrice = 21;
    bool straight = 22;
    repeated FeeInstruction fees = 23;
    repeated Trade trades = 24;
    OrderTimeInForce timeInForce = 25;
    google.protobuf.Timestamp expiryTime = 26;
    string parentExternalId = 27;
    string childExternalId = 28;

    message Trade {
        string tradeId = 1;
        string baseAssetId = 2;
        string baseVolume = 3;
        string price = 4;
        google.protobuf.Timestamp timestamp = 5;
        string oppositeOrderId = 6;
        string oppositeExternalOrderId = 7;
        string oppositeWalletId = 8;
        string quotingAssetId = 9;
        string quotingVolume = 10;
        int32 index = 11;
        string absoluteSpread = 12;
        string relativeSpread = 13;

        enum TradeRole {
            UNKNOWN_ROLE = 0;
            MAKER = 1;
            TAKER = 2;
        }
        TradeRole role = 14;

        repeated FeeTransfer fees = 15;
    }

    enum OrderType {
        UNKNOWN_ORDER_TYPE = 0;
        MARKET = 1;
        LIMIT = 2;
        STOP_LIMIT = 3;
    }

    enum OrderSide {
        UNKNOWN_ORDER_SIDE = 0;
        BUY = 1;
        SELL = 2;
    }

    enum OrderStatus {
        UNKNOWN_STATUS = 0;
        PLACED = 1;
        PARTIALLY_MATCHED = 2;
        MATCHED = 3;
        PENDING = 4;
        CANCELLED = 5;
        REPLACED = 6;
        REJECTED = 7;
        EXECUTED = 8;
    }

    enum OrderTimeInForce {
        UNKNOWN_ORDER_TIME_IN_FORCE = 0;
        GTC = 1;
        GTD = 2;
        IOC = 3;
        FOK = 4;
    }
}

message Fee {
    FeeInstruction instruction = 1;
    FeeTransfer transfer = 2;
}

message FeeInstruction {
    FeeType type = 1;
    string size = 2;
    FeeSizeType sizeType = 3;
    string makerSize = 4;
    FeeSizeType makerSizeType = 5;
    string sourceWalletId = 6;
    string targetWalletId = 7;
    repeated string assetsIds = 8;
    string makerFeeModificator = 9;
    int32 index = 10;

    enum FeeType {
        NO_FEE = 0;
        WALLET_FEE = 1;
        EXTERNAL_FEE = 2;
    }

    enum FeeSizeType {
        UNKNOWN_FEE_SIZE_TYPE = 0;
        PERCENTAGE = 1;
        ABSOLUTE = 2;
    }
}

message FeeTransfer {
    string volume = 1;
    string sourceWalletId = 2;
    string targetWalletId = 3;
    string assetId = 4;
    string FeeCoef = 5;
    int32 index = 6;
}